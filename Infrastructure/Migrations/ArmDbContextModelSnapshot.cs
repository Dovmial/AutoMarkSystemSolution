// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ArmDbContext))]
    partial class ArmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Domain.Aggregates.Lines.ProductionLineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("Domain.Aggregates.MarkingCodeHistory.MarkingCodeHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MarkingCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MarkingCodeId");

                    b.ToTable("MarkingCodesHistories");
                });

            modelBuilder.Entity("Domain.Aggregates.MarkingCodes.MarkingCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("CodeType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("SessionId");

                    b.ToTable("MarkingCodes");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Gtin")
                        .HasColumnType("integer");

                    b.Property<ulong?>("GtinGroup")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SerialLength")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Gtin");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Aggregates.Sessions.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ProductEntityProductionLineEntity", b =>
                {
                    b.Property<int>("ProductionLinesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductionLinesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductionLinesProducts", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.MarkingCodeHistory.MarkingCodeHistoryEntity", b =>
                {
                    b.HasOne("Domain.Aggregates.MarkingCodes.MarkingCodeEntity", "MarkingCodeEntity")
                        .WithMany("MarkingCodeHistoryEntities")
                        .HasForeignKey("MarkingCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkingCodeEntity");
                });

            modelBuilder.Entity("Domain.Aggregates.MarkingCodes.MarkingCodeEntity", b =>
                {
                    b.HasOne("Domain.Aggregates.Sessions.SessionEntity", "Session")
                        .WithMany("MarkingCodes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.Aggregates.Sessions.SessionEntity", b =>
                {
                    b.HasOne("Domain.Aggregates.Products.ProductEntity", "Product")
                        .WithMany("Sessions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Lines.ProductionLineEntity", "ProductionLine")
                        .WithMany("Sessions")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("ProductEntityProductionLineEntity", b =>
                {
                    b.HasOne("Domain.Aggregates.Lines.ProductionLineEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductionLinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Products.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Lines.ProductionLineEntity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Domain.Aggregates.MarkingCodes.MarkingCodeEntity", b =>
                {
                    b.Navigation("MarkingCodeHistoryEntities");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductEntity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Domain.Aggregates.Sessions.SessionEntity", b =>
                {
                    b.Navigation("MarkingCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
